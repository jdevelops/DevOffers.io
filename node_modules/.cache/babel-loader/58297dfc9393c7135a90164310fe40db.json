{"ast":null,"code":"import _regeneratorRuntime from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { w3cwebsocket } from 'websocket';\nimport { VSN, CHANNEL_EVENTS, TRANSPORTS, SOCKET_STATES, DEFAULT_TIMEOUT, WS_CLOSE_NORMAL, DEFAULT_HEADERS, CONNECTION_STATE } from './lib/constants';\nimport Timer from './lib/timer';\nimport Serializer from './lib/serializer';\nimport RealtimeChannel from './RealtimeChannel';\n\nvar noop = function noop() {};\n\nvar RealtimeClient = /*#__PURE__*/function () {\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  function RealtimeClient(endPoint, options) {\n    var _this = this;\n\n    _classCallCheck(this, RealtimeClient);\n\n    var _a;\n\n    this.accessToken = null;\n    this.channels = [];\n    this.endPoint = '';\n    this.headers = DEFAULT_HEADERS;\n    this.params = {};\n    this.timeout = DEFAULT_TIMEOUT;\n    this.transport = w3cwebsocket;\n    this.heartbeatIntervalMs = 30000;\n    this.heartbeatTimer = undefined;\n    this.pendingHeartbeatRef = null;\n    this.ref = 0;\n    this.logger = noop;\n    this.conn = null;\n    this.sendBuffer = [];\n    this.serializer = new Serializer();\n    this.stateChangeCallbacks = {\n      open: [],\n      close: [],\n      error: [],\n      message: []\n    };\n    this.eventsPerSecondLimitMs = 100;\n    this.inThrottle = false;\n    this.endPoint = \"\".concat(endPoint, \"/\").concat(TRANSPORTS.websocket);\n    if (options === null || options === void 0 ? void 0 : options.params) this.params = options.params;\n    if (options === null || options === void 0 ? void 0 : options.headers) this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n    if (options === null || options === void 0 ? void 0 : options.timeout) this.timeout = options.timeout;\n    if (options === null || options === void 0 ? void 0 : options.logger) this.logger = options.logger;\n    if (options === null || options === void 0 ? void 0 : options.transport) this.transport = options.transport;\n    if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n    var eventsPerSecond = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.eventsPerSecond;\n    if (eventsPerSecond) this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond);\n    this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs) ? options.reconnectAfterMs : function (tries) {\n      return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n    };\n    this.encode = (options === null || options === void 0 ? void 0 : options.encode) ? options.encode : function (payload, callback) {\n      return callback(JSON.stringify(payload));\n    };\n    this.decode = (options === null || options === void 0 ? void 0 : options.decode) ? options.decode : this.serializer.decode.bind(this.serializer);\n    this.reconnectTimer = new Timer(function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.disconnect();\n                this.connect();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }, this.reconnectAfterMs);\n  }\n  /**\n   * Connects the socket, unless already connected.\n   */\n\n\n  _createClass(RealtimeClient, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      if (this.conn) {\n        return;\n      }\n\n      this.conn = new this.transport(this._endPointURL(), [], null, this.headers);\n\n      if (this.conn) {\n        this.conn.binaryType = 'arraybuffer';\n\n        this.conn.onopen = function () {\n          return _this2._onConnOpen();\n        };\n\n        this.conn.onerror = function (error) {\n          return _this2._onConnError(error);\n        };\n\n        this.conn.onmessage = function (event) {\n          return _this2._onConnMessage(event);\n        };\n\n        this.conn.onclose = function (event) {\n          return _this2._onConnClose(event);\n        };\n      }\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(code, reason) {\n      if (this.conn) {\n        this.conn.onclose = function () {}; // noop\n\n\n        if (code) {\n          this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n        } else {\n          this.conn.close();\n        }\n\n        this.conn = null; // remove open handles\n\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.reset();\n      }\n    }\n    /**\n     * Returns all created channels\n     */\n\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      var _this3 = this;\n\n      return channel.unsubscribe().then(function (status) {\n        if (_this3.channels.length === 0) {\n          _this3.disconnect();\n        }\n\n        return status;\n      });\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      var _this4 = this;\n\n      return Promise.all(this.channels.map(function (channel) {\n        return channel.unsubscribe();\n      })).then(function (values) {\n        _this4.disconnect();\n\n        return values;\n      });\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n\n  }, {\n    key: \"log\",\n    value: function log(kind, msg, data) {\n      this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n\n  }, {\n    key: \"connectionState\",\n    value: function connectionState() {\n      switch (this.conn && this.conn.readyState) {\n        case SOCKET_STATES.connecting:\n          return CONNECTION_STATE.Connecting;\n\n        case SOCKET_STATES.open:\n          return CONNECTION_STATE.Open;\n\n        case SOCKET_STATES.closing:\n          return CONNECTION_STATE.Closing;\n\n        default:\n          return CONNECTION_STATE.Closed;\n      }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.connectionState() === CONNECTION_STATE.Open;\n    }\n  }, {\n    key: \"channel\",\n    value: function channel(topic) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n\n      if (!this.isConnected()) {\n        this.connect();\n      }\n\n      var chan = new RealtimeChannel(\"realtime:\".concat(topic), params, this);\n      this.channels.push(chan);\n      return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(data) {\n      var _this5 = this;\n\n      var topic = data.topic,\n          event = data.event,\n          payload = data.payload,\n          ref = data.ref;\n\n      var callback = function callback() {\n        _this5.encode(data, function (result) {\n          var _a;\n\n          (_a = _this5.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n        });\n      };\n\n      this.log('push', \"\".concat(topic, \" \").concat(event, \" (\").concat(ref, \")\"), payload);\n\n      if (this.isConnected()) {\n        if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n          var isThrottled = this._throttle(callback)();\n\n          if (isThrottled) {\n            return 'rate limited';\n          }\n        } else {\n          callback();\n        }\n      } else {\n        this.sendBuffer.push(callback);\n      }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * @param token A JWT string.\n     */\n\n  }, {\n    key: \"setAuth\",\n    value: function setAuth(token) {\n      this.accessToken = token;\n      this.channels.forEach(function (channel) {\n        token && channel.updateJoinPayload({\n          access_token: token\n        });\n\n        if (channel.joinedOnce && channel._isJoined()) {\n          channel._push(CHANNEL_EVENTS.access_token, {\n            access_token: token\n          });\n        }\n      });\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"_makeRef\",\n    value: function _makeRef() {\n      var newRef = this.ref + 1;\n\n      if (newRef === this.ref) {\n        this.ref = 0;\n      } else {\n        this.ref = newRef;\n      }\n\n      return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"_leaveOpenTopic\",\n    value: function _leaveOpenTopic(topic) {\n      var dupChannel = this.channels.find(function (c) {\n        return c.topic === topic && (c._isJoined() || c._isJoining());\n      });\n\n      if (dupChannel) {\n        this.log('transport', \"leaving duplicate topic \\\"\".concat(topic, \"\\\"\"));\n        dupChannel.unsubscribe();\n      }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"_remove\",\n    value: function _remove(channel) {\n      this.channels = this.channels.filter(function (c) {\n        return c._joinRef() !== channel._joinRef();\n      });\n    }\n    /**\n     * Returns the URL of the websocket.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"_endPointURL\",\n    value: function _endPointURL() {\n      return this._appendParams(this.endPoint, Object.assign({}, this.params, {\n        vsn: VSN\n      }));\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onConnMessage\",\n    value: function _onConnMessage(rawMessage) {\n      var _this6 = this;\n\n      this.decode(rawMessage.data, function (msg) {\n        var topic = msg.topic,\n            event = msg.event,\n            payload = msg.payload,\n            ref = msg.ref;\n\n        if (ref && ref === _this6.pendingHeartbeatRef || event === (payload === null || payload === void 0 ? void 0 : payload.type)) {\n          _this6.pendingHeartbeatRef = null;\n        }\n\n        _this6.log('receive', \"\".concat(payload.status || '', \" \").concat(topic, \" \").concat(event, \" \").concat(ref && '(' + ref + ')' || ''), payload);\n\n        _this6.channels.filter(function (channel) {\n          return channel._isMember(topic);\n        }).forEach(function (channel) {\n          return channel._trigger(event, payload, ref);\n        });\n\n        _this6.stateChangeCallbacks.message.forEach(function (callback) {\n          return callback(msg);\n        });\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onConnOpen\",\n    value: function _onConnOpen() {\n      var _this7 = this;\n\n      this.log('transport', \"connected to \".concat(this._endPointURL()));\n\n      this._flushSendBuffer();\n\n      this.reconnectTimer.reset();\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.heartbeatTimer = setInterval(function () {\n        return _this7._sendHeartbeat();\n      }, this.heartbeatIntervalMs);\n      this.stateChangeCallbacks.open.forEach(function (callback) {\n        return callback();\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onConnClose\",\n    value: function _onConnClose(event) {\n      this.log('transport', 'close', event);\n\n      this._triggerChanError();\n\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n      this.reconnectTimer.scheduleTimeout();\n      this.stateChangeCallbacks.close.forEach(function (callback) {\n        return callback(event);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_onConnError\",\n    value: function _onConnError(error) {\n      this.log('transport', error.message);\n\n      this._triggerChanError();\n\n      this.stateChangeCallbacks.error.forEach(function (callback) {\n        return callback(error);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_triggerChanError\",\n    value: function _triggerChanError() {\n      this.channels.forEach(function (channel) {\n        return channel._trigger(CHANNEL_EVENTS.error);\n      });\n    }\n    /** @internal */\n\n  }, {\n    key: \"_appendParams\",\n    value: function _appendParams(url, params) {\n      if (Object.keys(params).length === 0) {\n        return url;\n      }\n\n      var prefix = url.match(/\\?/) ? '&' : '?';\n      var query = new URLSearchParams(params);\n      return \"\".concat(url).concat(prefix).concat(query);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_flushSendBuffer\",\n    value: function _flushSendBuffer() {\n      if (this.isConnected() && this.sendBuffer.length > 0) {\n        this.sendBuffer.forEach(function (callback) {\n          return callback();\n        });\n        this.sendBuffer = [];\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_sendHeartbeat\",\n    value: function _sendHeartbeat() {\n      var _a;\n\n      if (!this.isConnected()) {\n        return;\n      }\n\n      if (this.pendingHeartbeatRef) {\n        this.pendingHeartbeatRef = null;\n        this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n        (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n        return;\n      }\n\n      this.pendingHeartbeatRef = this._makeRef();\n      this.push({\n        topic: 'phoenix',\n        event: 'heartbeat',\n        payload: {},\n        ref: this.pendingHeartbeatRef\n      });\n      this.setAuth(this.accessToken);\n    }\n    /** @internal */\n\n  }, {\n    key: \"_throttle\",\n    value: function _throttle(callback) {\n      var _this8 = this;\n\n      var eventsPerSecondLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.eventsPerSecondLimitMs;\n      return function () {\n        if (_this8.inThrottle) return true;\n        callback();\n        _this8.inThrottle = true;\n        setTimeout(function () {\n          _this8.inThrottle = false;\n        }, eventsPerSecondLimit);\n        return false;\n      };\n    }\n  }]);\n\n  return RealtimeClient;\n}();\n\nexport { RealtimeClient as default };","map":{"version":3,"mappings":"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","names":["w3cwebsocket","VSN","CHANNEL_EVENTS","TRANSPORTS","SOCKET_STATES","DEFAULT_TIMEOUT","WS_CLOSE_NORMAL","DEFAULT_HEADERS","CONNECTION_STATE","Timer","Serializer","RealtimeChannel","noop","RealtimeClient","endPoint","options","undefined","open","close","error","message","websocket","params","headers","Object","timeout","logger","transport","heartbeatIntervalMs","eventsPerSecond","_a","eventsPerSecondLimitMs","Math","floor","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","serializer","bind","reconnectTimer","__awaiter","disconnect","connect","conn","_endPointURL","binaryType","onopen","_onConnOpen","onerror","_onConnError","onmessage","event","_onConnMessage","onclose","_onConnClose","code","reason","heartbeatTimer","clearInterval","reset","channels","channel","unsubscribe","then","status","length","Promise","all","map","values","kind","msg","data","readyState","connecting","Connecting","Open","closing","Closing","Closed","connectionState","topic","config","isConnected","chan","push","ref","result","send","log","includes","isThrottled","_throttle","sendBuffer","token","accessToken","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","newRef","toString","dupChannel","find","c","_isJoining","filter","_joinRef","_appendParams","assign","vsn","rawMessage","pendingHeartbeatRef","type","_isMember","_trigger","stateChangeCallbacks","_flushSendBuffer","setInterval","_sendHeartbeat","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","_makeRef","setAuth","eventsPerSecondLimit","inThrottle","setTimeout"],"sources":["C:\\Frontend22\\Projects\\inz\\DevOffers.io\\node_modules\\@supabase\\realtime-js\\src\\RealtimeClient.ts"],"sourcesContent":["import { w3cwebsocket } from 'websocket'\nimport {\n  VSN,\n  CHANNEL_EVENTS,\n  TRANSPORTS,\n  SOCKET_STATES,\n  DEFAULT_TIMEOUT,\n  WS_CLOSE_NORMAL,\n  DEFAULT_HEADERS,\n  CONNECTION_STATE,\n} from './lib/constants'\nimport Timer from './lib/timer'\nimport Serializer from './lib/serializer'\nimport RealtimeChannel, { RealtimeChannelOptions } from './RealtimeChannel'\n\nexport type RealtimeClientOptions = {\n  transport?: WebSocket\n  timeout?: number\n  heartbeatIntervalMs?: number\n  logger?: Function\n  encode?: Function\n  decode?: Function\n  reconnectAfterMs?: Function\n  headers?: { [key: string]: string }\n  params?: { [key: string]: any }\n}\n\nexport type RealtimeMessage = {\n  topic: string\n  event: string\n  payload: any\n  ref: string\n  join_ref?: string\n}\n\nexport type RealtimeRemoveChannelResponse = 'ok' | 'timed out' | 'error'\n\nconst noop = () => {}\n\nexport default class RealtimeClient {\n  accessToken: string | null = null\n  channels: RealtimeChannel[] = []\n  endPoint: string = ''\n  headers?: { [key: string]: string } = DEFAULT_HEADERS\n  params?: { [key: string]: string } = {}\n  timeout: number = DEFAULT_TIMEOUT\n  transport: any = w3cwebsocket\n  heartbeatIntervalMs: number = 30000\n  heartbeatTimer: ReturnType<typeof setInterval> | undefined = undefined\n  pendingHeartbeatRef: string | null = null\n  ref: number = 0\n  reconnectTimer: Timer\n  logger: Function = noop\n  encode: Function\n  decode: Function\n  reconnectAfterMs: Function\n  conn: WebSocket | null = null\n  sendBuffer: Function[] = []\n  serializer: Serializer = new Serializer()\n  stateChangeCallbacks: {\n    open: Function[]\n    close: Function[]\n    error: Function[]\n    message: Function[]\n  } = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n  }\n  eventsPerSecondLimitMs: number = 100\n  inThrottle: boolean = false\n\n  /**\n   * Initializes the Socket.\n   *\n   * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n   * @param options.transport The Websocket Transport, for example WebSocket.\n   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n   * @param options.params The optional params to pass when connecting.\n   * @param options.headers The optional headers to pass when connecting.\n   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n   */\n  constructor(endPoint: string, options?: RealtimeClientOptions) {\n    this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`\n\n    if (options?.params) this.params = options.params\n    if (options?.headers) this.headers = { ...this.headers, ...options.headers }\n    if (options?.timeout) this.timeout = options.timeout\n    if (options?.logger) this.logger = options.logger\n    if (options?.transport) this.transport = options.transport\n    if (options?.heartbeatIntervalMs)\n      this.heartbeatIntervalMs = options.heartbeatIntervalMs\n\n    const eventsPerSecond = options?.params?.eventsPerSecond\n    if (eventsPerSecond)\n      this.eventsPerSecondLimitMs = Math.floor(1000 / eventsPerSecond)\n\n    this.reconnectAfterMs = options?.reconnectAfterMs\n      ? options.reconnectAfterMs\n      : (tries: number) => {\n          return [1000, 2000, 5000, 10000][tries - 1] || 10000\n        }\n    this.encode = options?.encode\n      ? options.encode\n      : (payload: JSON, callback: Function) => {\n          return callback(JSON.stringify(payload))\n        }\n    this.decode = options?.decode\n      ? options.decode\n      : this.serializer.decode.bind(this.serializer)\n    this.reconnectTimer = new Timer(async () => {\n      this.disconnect()\n      this.connect()\n    }, this.reconnectAfterMs)\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   */\n  connect(): void {\n    if (this.conn) {\n      return\n    }\n\n    this.conn = new this.transport(this._endPointURL(), [], null, this.headers)\n\n    if (this.conn) {\n      this.conn.binaryType = 'arraybuffer'\n      this.conn.onopen = () => this._onConnOpen()\n      this.conn.onerror = (error) => this._onConnError(error as ErrorEvent)\n      this.conn.onmessage = (event) => this._onConnMessage(event)\n      this.conn.onclose = (event) => this._onConnClose(event)\n    }\n  }\n\n  /**\n   * Disconnects the socket.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {} // noop\n      if (code) {\n        this.conn.close(code, reason ?? '')\n      } else {\n        this.conn.close()\n      }\n      this.conn = null\n      // remove open handles\n      this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n      this.reconnectTimer.reset()\n    }\n  }\n\n  /**\n   * Returns all created channels\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.channels\n  }\n\n  /**\n   * Unsubscribes and removes a single channel\n   * @param channel A RealtimeChannel instance\n   */\n  removeChannel(\n    channel: RealtimeChannel\n  ): Promise<RealtimeRemoveChannelResponse> {\n    return channel.unsubscribe().then((status) => {\n      if (this.channels.length === 0) {\n        this.disconnect()\n      }\n      return status\n    })\n  }\n\n  /**\n   * Unsubscribes and removes all channels\n   */\n  removeAllChannels(): Promise<RealtimeRemoveChannelResponse[]> {\n    return Promise.all(\n      this.channels.map((channel) => channel.unsubscribe())\n    ).then((values) => {\n      this.disconnect()\n      return values\n    })\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data)\n  }\n\n  /**\n   * Returns the current state of the socket.\n   */\n  connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing\n      default:\n        return CONNECTION_STATE.Closed\n    }\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open\n  }\n\n  channel(\n    topic: string,\n    params: RealtimeChannelOptions = { config: {} }\n  ): RealtimeChannel {\n    if (!this.isConnected()) {\n      this.connect()\n    }\n\n    const chan = new RealtimeChannel(`realtime:${topic}`, params, this)\n    this.channels.push(chan)\n    return chan\n  }\n\n  /**\n   * Push out a message if the socket is connected.\n   *\n   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n   */\n  push(data: RealtimeMessage): 'rate limited' | void {\n    const { topic, event, payload, ref } = data\n    let callback = () => {\n      this.encode(data, (result: any) => {\n        this.conn?.send(result)\n      })\n    }\n    this.log('push', `${topic} ${event} (${ref})`, payload)\n    if (this.isConnected()) {\n      if (['broadcast', 'presence', 'postgres_changes'].includes(event)) {\n        const isThrottled = this._throttle(callback)()\n        if (isThrottled) {\n          return 'rate limited'\n        }\n      } else {\n        callback()\n      }\n    } else {\n      this.sendBuffer.push(callback)\n    }\n  }\n\n  /**\n   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n   *\n   * @param token A JWT string.\n   */\n  setAuth(token: string | null): void {\n    this.accessToken = token\n\n    this.channels.forEach((channel) => {\n      token && channel.updateJoinPayload({ access_token: token })\n\n      if (channel.joinedOnce && channel._isJoined()) {\n        channel._push(CHANNEL_EVENTS.access_token, { access_token: token })\n      }\n    })\n  }\n\n  /**\n   * Return the next message ref, accounting for overflows\n   *\n   * @internal\n   */\n  _makeRef(): string {\n    let newRef = this.ref + 1\n    if (newRef === this.ref) {\n      this.ref = 0\n    } else {\n      this.ref = newRef\n    }\n\n    return this.ref.toString()\n  }\n\n  /**\n   * Unsubscribe from channels with the specified topic.\n   *\n   * @internal\n   */\n  _leaveOpenTopic(topic: string): void {\n    let dupChannel = this.channels.find(\n      (c) => c.topic === topic && (c._isJoined() || c._isJoining())\n    )\n    if (dupChannel) {\n      this.log('transport', `leaving duplicate topic \"${topic}\"`)\n      dupChannel.unsubscribe()\n    }\n  }\n\n  /**\n   * Removes a subscription from the socket.\n   *\n   * @param channel An open subscription.\n   *\n   * @internal\n   */\n  _remove(channel: RealtimeChannel) {\n    this.channels = this.channels.filter(\n      (c: RealtimeChannel) => c._joinRef() !== channel._joinRef()\n    )\n  }\n\n  /**\n   * Returns the URL of the websocket.\n   *\n   * @internal\n   */\n  private _endPointURL(): string {\n    return this._appendParams(\n      this.endPoint,\n      Object.assign({}, this.params, { vsn: VSN })\n    )\n  }\n\n  /** @internal */\n  private _onConnMessage(rawMessage: { data: any }) {\n    this.decode(rawMessage.data, (msg: RealtimeMessage) => {\n      let { topic, event, payload, ref } = msg\n\n      if (\n        (ref && ref === this.pendingHeartbeatRef) ||\n        event === payload?.type\n      ) {\n        this.pendingHeartbeatRef = null\n      }\n\n      this.log(\n        'receive',\n        `${payload.status || ''} ${topic} ${event} ${\n          (ref && '(' + ref + ')') || ''\n        }`,\n        payload\n      )\n      this.channels\n        .filter((channel: RealtimeChannel) => channel._isMember(topic))\n        .forEach((channel: RealtimeChannel) =>\n          channel._trigger(event, payload, ref)\n        )\n      this.stateChangeCallbacks.message.forEach((callback) => callback(msg))\n    })\n  }\n\n  /** @internal */\n  private _onConnOpen() {\n    this.log('transport', `connected to ${this._endPointURL()}`)\n    this._flushSendBuffer()\n    this.reconnectTimer.reset()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.heartbeatTimer = setInterval(\n      () => this._sendHeartbeat(),\n      this.heartbeatIntervalMs\n    )\n    this.stateChangeCallbacks.open.forEach((callback) => callback())!\n  }\n\n  /** @internal */\n  private _onConnClose(event: any) {\n    this.log('transport', 'close', event)\n    this._triggerChanError()\n    this.heartbeatTimer && clearInterval(this.heartbeatTimer)\n    this.reconnectTimer.scheduleTimeout()\n    this.stateChangeCallbacks.close.forEach((callback) => callback(event))\n  }\n\n  /** @internal */\n  private _onConnError(error: ErrorEvent) {\n    this.log('transport', error.message)\n    this._triggerChanError()\n    this.stateChangeCallbacks.error.forEach((callback) => callback(error))\n  }\n\n  /** @internal */\n  private _triggerChanError() {\n    this.channels.forEach((channel: RealtimeChannel) =>\n      channel._trigger(CHANNEL_EVENTS.error)\n    )\n  }\n\n  /** @internal */\n  private _appendParams(\n    url: string,\n    params: { [key: string]: string }\n  ): string {\n    if (Object.keys(params).length === 0) {\n      return url\n    }\n    const prefix = url.match(/\\?/) ? '&' : '?'\n    const query = new URLSearchParams(params)\n\n    return `${url}${prefix}${query}`\n  }\n\n  /** @internal */\n  private _flushSendBuffer() {\n    if (this.isConnected() && this.sendBuffer.length > 0) {\n      this.sendBuffer.forEach((callback) => callback())\n      this.sendBuffer = []\n    }\n  }\n  /** @internal */\n  private _sendHeartbeat() {\n    if (!this.isConnected()) {\n      return\n    }\n    if (this.pendingHeartbeatRef) {\n      this.pendingHeartbeatRef = null\n      this.log(\n        'transport',\n        'heartbeat timeout. Attempting to re-establish connection'\n      )\n      this.conn?.close(WS_CLOSE_NORMAL, 'hearbeat timeout')\n      return\n    }\n    this.pendingHeartbeatRef = this._makeRef()\n    this.push({\n      topic: 'phoenix',\n      event: 'heartbeat',\n      payload: {},\n      ref: this.pendingHeartbeatRef,\n    })\n    this.setAuth(this.accessToken)\n  }\n\n  /** @internal */\n  private _throttle(\n    callback: Function,\n    eventsPerSecondLimit: number = this.eventsPerSecondLimitMs\n  ): () => boolean {\n    return () => {\n      if (this.inThrottle) return true\n      callback()\n      this.inThrottle = true\n      setTimeout(() => {\n        this.inThrottle = false\n      }, eventsPerSecondLimit)\n      return false\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}