{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const cleanPath = this._removeEmptyFolders(path);\n\n        const _path = this._getFinalPath(cleanPath);\n\n        const res = yield this.fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\n\n\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n\n\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\n\n\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `&download=${options.download === true ? '' : options.download}` : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n\n\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? `?${transformationQuery}` : '';\n\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\n\n\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? `download=${options.download === true ? '' : options.download}` : '';\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n\n    let queryString = _queryString.join('&');\n\n    if (queryString !== '') {\n      queryString = `?${queryString}`;\n    }\n\n    return {\n      data: {\n        publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`)\n      }\n    };\n  }\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n\n  transformOptsToQueryString(transform) {\n    const params = [];\n\n    if (transform.width) {\n      params.push(`width=${transform.width}`);\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`);\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`);\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`);\n    }\n\n    return params.join('&');\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,QAA6C,eAA7C;AACA,SAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,MAA3B,QAAyC,cAAzC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AASA,MAAMC,sBAAsB,GAAG;EAC7BC,KAAK,EAAE,GADsB;EAE7BC,MAAM,EAAE,CAFqB;EAG7BC,MAAM,EAAE;IACNC,MAAM,EAAE,MADF;IAENC,KAAK,EAAE;EAFD;AAHqB,CAA/B;AASA,MAAMC,oBAAoB,GAAgB;EACxCC,YAAY,EAAE,MAD0B;EAExCC,WAAW,EAAE,0BAF2B;EAGxCC,MAAM,EAAE;AAHgC,CAA1C;AAMA,eAAc,MAAOC,cAAP,CAAqB;EAMjCC,YACEC,GADF,EAIe;IAAA,IAFbC,OAEa,uEAFwB,EAExB;IAAA,IADbC,QACa;IAAA,IAAbC,KAAa;IAEb,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAahB,YAAY,CAACgB,KAAD,CAAzB;EACD;EAED;;;;;;;;;EAOcC,cAAc,CAC1BC,MAD0B,EAE1BC,IAF0B,EAG1BC,QAH0B,EAc1BC,WAd0B,EAcD;;MAWzB,IAAI;QACF,IAAIC,IAAJ;QACA,MAAMC,OAAO,mCAAQhB,oBAAR,GAAiCc,WAAjC,CAAb;QACA,MAAMP,OAAO,mCACR,KAAKA,OADG,GAEPI,MAAM,KAAK,MAAX,IAAqB;UAAE,YAAYM,MAAM,CAACD,OAAO,CAACb,MAAT;QAApB,CAFd,CAAb;;QAKA,IAAI,OAAOe,IAAP,KAAgB,WAAhB,IAA+BL,QAAQ,YAAYK,IAAvD,EAA6D;UAC3DH,IAAI,GAAG,IAAII,QAAJ,EAAP;UACAJ,IAAI,CAACK,MAAL,CAAY,cAAZ,EAA4BJ,OAAO,CAACf,YAApC;UACAc,IAAI,CAACK,MAAL,CAAY,EAAZ,EAAgBP,QAAhB;QACD,CAJD,MAIO,IAAI,OAAOM,QAAP,KAAoB,WAApB,IAAmCN,QAAQ,YAAYM,QAA3D,EAAqE;UAC1EJ,IAAI,GAAGF,QAAP;UACAE,IAAI,CAACK,MAAL,CAAY,cAAZ,EAA4BJ,OAAO,CAACf,YAApC;QACD,CAHM,MAGA;UACLc,IAAI,GAAGF,QAAP;UACAN,OAAO,CAAC,eAAD,CAAP,GAA2B,WAAWS,OAAO,CAACf,YAAY,EAA1D;UACAM,OAAO,CAAC,cAAD,CAAP,GAA0BS,OAAO,CAACd,WAAlC;QACD;;QAED,MAAMmB,SAAS,GAAG,KAAKC,mBAAL,CAAyBV,IAAzB,CAAlB;;QACA,MAAMW,KAAK,GAAG,KAAKC,aAAL,CAAmBH,SAAnB,CAAd;;QACA,MAAMI,GAAG,GAAG,MAAM,KAAKhB,KAAL,CAAW,GAAG,KAAKH,GAAG,WAAWiB,KAAK,EAAtC,EAA0C;UAC1DZ,MAD0D;UAE1DI,IAAI,EAAEA,IAFoD;UAG1DR;QAH0D,CAA1C,CAAlB;;QAMA,IAAIkB,GAAG,CAACC,EAAR,EAAY;UACV,OAAO;YACLC,IAAI,EAAE;cAAEf,IAAI,EAAES;YAAR,CADD;YAELO,KAAK,EAAE;UAFF,CAAP;QAID,CALD,MAKO;UACL,MAAMA,KAAK,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAApB;UACA,OAAO;YAAEF,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;MACF,CAtCD,CAsCE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;EAMME,MAAM,CACVlB,IADU,EAEVC,QAFU,EAaVC,WAbU,EAae;;MAWzB,OAAO,KAAKJ,cAAL,CAAoB,MAApB,EAA4BE,IAA5B,EAAkCC,QAAlC,EAA4CC,WAA5C,CAAP;IACD;EAAA;EAED;;;;;;;;EAMMiB,MAAM,CACVnB,IADU,EAEVC,QAFU,EAaVC,WAbU,EAae;;MAWzB,OAAO,KAAKJ,cAAL,CAAoB,KAApB,EAA2BE,IAA3B,EAAiCC,QAAjC,EAA2CC,WAA3C,CAAP;IACD;EAAA;EAED;;;;;;;;EAMMkB,IAAI,CACRC,QADQ,EAERC,MAFQ,EAEM;;MAWd,IAAI;QACF,MAAMP,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,cAFU,EAGrB;UAAEE,QAAQ,EAAE,KAAKA,QAAjB;UAA2B2B,SAAS,EAAEF,QAAtC;UAAgDG,cAAc,EAAEF;QAAhE,CAHqB,EAIrB;UAAE3B,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAMA,OAAO;UAAEoB,IAAF;UAAQC,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;EAMMS,IAAI,CACRJ,QADQ,EAERC,MAFQ,EAEM;;MAWd,IAAI;QACF,MAAMP,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,cAFU,EAGrB;UAAEE,QAAQ,EAAE,KAAKA,QAAjB;UAA2B2B,SAAS,EAAEF,QAAtC;UAAgDG,cAAc,EAAEF;QAAhE,CAHqB,EAIrB;UAAE3B,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAMA,OAAO;UAAEoB,IAAI,EAAE;YAAEf,IAAI,EAAEe,IAAI,CAACW;UAAb,CAAR;UAA4BV,KAAK,EAAE;QAAnC,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;;;EAQMW,eAAe,CACnB3B,IADmB,EAEnB4B,SAFmB,EAGnBxB,OAHmB,EAGoD;;MAWvE,IAAI;QACF,IAAIO,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAZ;;QAEA,IAAIe,IAAI,GAAG,MAAMpC,IAAI,CACnB,KAAKkB,KADc,EAEnB,GAAG,KAAKH,GAAG,gBAAgBiB,KAAK,EAFb,EAEekB;UAChCD;QADgC,GACjB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEE,SAAT,IAAqB;UAAEA,SAAS,EAAE1B,OAAO,CAAC0B;QAArB,CAArB,GAAwD,EADvC,CAFf,EAInB;UAAEnC,OAAO,EAAE,KAAKA;QAAhB,CAJmB,CAArB;QAMA,MAAMoC,kBAAkB,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,QAAT,IACvB,aAAa5B,OAAO,CAAC4B,QAAR,KAAqB,IAArB,GAA4B,EAA5B,GAAiC5B,OAAO,CAAC4B,QAAQ,EADvC,GAEvB,EAFJ;QAGA,MAAMC,SAAS,GAAGC,SAAS,CAAC,GAAG,KAAKxC,GAAG,GAAGqB,IAAI,CAACoB,SAAS,GAAGJ,kBAAkB,EAAlD,CAA3B;QACAhB,IAAI,GAAG;UAAEkB;QAAF,CAAP;QACA,OAAO;UAAElB,IAAF;UAAQC,KAAK,EAAE;QAAf,CAAP;MACD,CAfD,CAeE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;;EAOMoB,gBAAgB,CACpBC,KADoB,EAEpBT,SAFoB,EAGpBxB,OAHoB,EAGoB;;MAWxC,IAAI;QACF,MAAMW,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,gBAAgB,KAAKE,QAAQ,EAFnB,EAGrB;UAAEgC,SAAF;UAAaS;QAAb,CAHqB,EAIrB;UAAE1C,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAOA,MAAMoC,kBAAkB,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,QAAT,IACvB,aAAa5B,OAAO,CAAC4B,QAAR,KAAqB,IAArB,GAA4B,EAA5B,GAAiC5B,OAAO,CAAC4B,QAAQ,EADvC,GAEvB,EAFJ;QAGA,OAAO;UACLjB,IAAI,EAAEA,IAAI,CAACuB,GAAL,CAAUC,KAAD,IAAkCV,gCAC5CU,KAD4C,GACvC;YACRN,SAAS,EAAEM,KAAK,CAACJ,SAAN,GACPD,SAAS,CAAC,GAAG,KAAKxC,GAAG,GAAG6C,KAAK,CAACJ,SAAS,GAAGJ,kBAAkB,EAAnD,CADF,GAEP;UAHI,CADuC,CAA3C,CADD;UAOLf,KAAK,EAAE;QAPF,CAAP;MASD,CApBD,CAoBE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;EAMMgB,QAAQ,CACZhC,IADY,EAEZI,OAFY,EAE8B;;MAW1C,MAAMoC,mBAAmB,GAAG,QAAOpC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE0B,SAAhB,MAA8B,WAA1D;MACA,MAAMW,UAAU,GAAGD,mBAAmB,GAAG,4BAAH,GAAkC,QAAxE;MACA,MAAME,mBAAmB,GAAG,KAAKC,0BAAL,CAAgC,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEb,SAAT,KAAsB,EAAtD,CAA5B;MACA,MAAMc,WAAW,GAAGF,mBAAmB,GAAG,IAAIA,mBAAmB,EAA1B,GAA+B,EAAtE;;MAEA,IAAI;QACF,MAAM/B,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAd;;QACA,MAAMa,GAAG,GAAG,MAAMnC,GAAG,CAAC,KAAKmB,KAAN,EAAa,GAAG,KAAKH,GAAG,IAAI+C,UAAU,IAAI9B,KAAK,GAAGiC,WAAW,EAA7D,EAAiE;UACpFjD,OAAO,EAAE,KAAKA,OADsE;UAEpFkD,aAAa,EAAE;QAFqE,CAAjE,CAArB;QAIA,MAAM9B,IAAI,GAAG,MAAMF,GAAG,CAACiC,IAAJ,EAAnB;QACA,OAAO;UAAE/B,IAAF;UAAQC,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;;;;;;;EAQA+B,YAAY,CACV/C,IADU,EAEVI,OAFU,EAE6D;IAEvE,MAAMO,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAd;;IACA,MAAMgD,YAAY,GAAG,EAArB;IAEA,MAAMjB,kBAAkB,GAAG,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,QAAT,IACvB,YAAY5B,OAAO,CAAC4B,QAAR,KAAqB,IAArB,GAA4B,EAA5B,GAAiC5B,OAAO,CAAC4B,QAAQ,EADtC,GAEvB,EAFJ;;IAIA,IAAID,kBAAkB,KAAK,EAA3B,EAA+B;MAC7BiB,YAAY,CAACC,IAAb,CAAkBlB,kBAAlB;IACD;;IAED,MAAMS,mBAAmB,GAAG,QAAOpC,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE0B,SAAhB,MAA8B,WAA1D;IACA,MAAMW,UAAU,GAAGD,mBAAmB,GAAG,cAAH,GAAoB,QAA1D;IACA,MAAME,mBAAmB,GAAG,KAAKC,0BAAL,CAAgC,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEb,SAAT,KAAsB,EAAtD,CAA5B;;IAEA,IAAIY,mBAAmB,KAAK,EAA5B,EAAgC;MAC9BM,YAAY,CAACC,IAAb,CAAkBP,mBAAlB;IACD;;IAED,IAAIE,WAAW,GAAGI,YAAY,CAACE,IAAb,CAAkB,GAAlB,CAAlB;;IACA,IAAIN,WAAW,KAAK,EAApB,EAAwB;MACtBA,WAAW,GAAG,IAAIA,WAAW,EAA7B;IACD;;IAED,OAAO;MACL7B,IAAI,EAAE;QAAEoC,SAAS,EAAEjB,SAAS,CAAC,GAAG,KAAKxC,GAAG,IAAI+C,UAAU,WAAW9B,KAAK,GAAGiC,WAAW,EAAxD;MAAtB;IADD,CAAP;EAGD;EAED;;;;;;;EAKMhE,MAAM,CACVyD,KADU,EACK;;MAWf,IAAI;QACF,MAAMtB,IAAI,GAAG,MAAMnC,MAAM,CACvB,KAAKiB,KADkB,EAEvB,GAAG,KAAKH,GAAG,WAAW,KAAKE,QAAQ,EAFZ,EAGvB;UAAEwD,QAAQ,EAAEf;QAAZ,CAHuB,EAIvB;UAAE1C,OAAO,EAAE,KAAKA;QAAhB,CAJuB,CAAzB;QAMA,OAAO;UAAEoB,IAAF;UAAQC,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;EAED;;;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EAEA;;;;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;;EAEA;;;;;;EAIMqC,IAAI,CACRrD,IADQ,EAERI,OAFQ,EAGRkD,UAHQ,EAGoB;;MAW5B,IAAI;QACF,MAAMnD,IAAI,iDAAQrB,sBAAR,GAAmCsB,OAAnC,GAA0C;UAAEmD,MAAM,EAAEvD,IAAI,IAAI;QAAlB,CAA1C,CAAV;QACA,MAAMe,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,gBAAgB,KAAKE,QAAQ,EAFnB,EAGrBO,IAHqB,EAIrB;UAAER,OAAO,EAAE,KAAKA;QAAhB,CAJqB,EAKrB2D,UALqB,CAAvB;QAOA,OAAO;UAAEvC,IAAF;UAAQC,KAAK,EAAE;QAAf,CAAP;MACD,CAVD,CAUE,OAAOA,KAAP,EAAc;QACd,IAAIvC,cAAc,CAACuC,KAAD,CAAlB,EAA2B;UACzB,OAAO;YAAED,IAAI,EAAE,IAAR;YAAcC;UAAd,CAAP;QACD;;QAED,MAAMA,KAAN;MACD;IACF;EAAA;;EAEOJ,aAAa,CAACZ,IAAD,EAAa;IAChC,OAAO,GAAG,KAAKJ,QAAQ,IAAII,IAAI,EAA/B;EACD;;EAEOU,mBAAmB,CAACV,IAAD,EAAa;IACtC,OAAOA,IAAI,CAACwD,OAAL,CAAa,UAAb,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,CAAP;EACD;;EAEOb,0BAA0B,CAACb,SAAD,EAA4B;IAC5D,MAAM2B,MAAM,GAAG,EAAf;;IACA,IAAI3B,SAAS,CAAC4B,KAAd,EAAqB;MACnBD,MAAM,CAACR,IAAP,CAAY,SAASnB,SAAS,CAAC4B,KAAK,EAApC;IACD;;IAED,IAAI5B,SAAS,CAAC6B,MAAd,EAAsB;MACpBF,MAAM,CAACR,IAAP,CAAY,UAAUnB,SAAS,CAAC6B,MAAM,EAAtC;IACD;;IAED,IAAI7B,SAAS,CAAC8B,MAAd,EAAsB;MACpBH,MAAM,CAACR,IAAP,CAAY,UAAUnB,SAAS,CAAC8B,MAAM,EAAtC;IACD;;IAED,IAAI9B,SAAS,CAAC+B,MAAd,EAAsB;MACpBJ,MAAM,CAACR,IAAP,CAAY,UAAUnB,SAAS,CAAC+B,MAAM,EAAtC;IACD;;IAED,OAAOJ,MAAM,CAACP,IAAP,CAAY,GAAZ,CAAP;EACD;;AA9jBgC","names":["isStorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","error","json","upload","update","move","fromPath","toPath","sourceKey","destinationKey","copy","Key","createSignedUrl","expiresIn","Object","transform","downloadQueryParam","download","signedUrl","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","replace","params","width","height","resize","format"],"sources":["C:\\Frontend22\\Projects\\inz\\DevOffers.io\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport {\r\n  FileObject,\r\n  FileOptions,\r\n  SearchOptions,\r\n  FetchParameters,\r\n  TransformOptions,\r\n} from '../lib/types'\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n  limit: 100,\r\n  offset: 0,\r\n  sortBy: {\r\n    column: 'name',\r\n    order: 'asc',\r\n  },\r\n}\r\n\r\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\r\n  cacheControl: '3600',\r\n  contentType: 'text/plain;charset=UTF-8',\r\n  upsert: false,\r\n}\r\n\r\nexport default class StorageFileApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected bucketId?: string\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    bucketId?: string,\r\n    fetch?: Fetch\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.bucketId = bucketId\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  private async uploadOrUpdate(\r\n    method: 'POST' | 'PUT',\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let body\r\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const cleanPath = this._removeEmptyFolders(path)\r\n      const _path = this._getFinalPath(cleanPath)\r\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\r\n        method,\r\n        body: body as BodyInit,\r\n        headers,\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async upload(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async update(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\r\n  async move(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/move`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\r\n  async copy(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/copy`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data: { path: data.Key }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async createSignedUrl(\r\n    path: string,\r\n    expiresIn: number,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      let data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${_path}`,\r\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\r\n        { headers: this.headers }\r\n      )\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\r\n      data = { signedUrl }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\r\n  async createSignedUrls(\r\n    paths: string[],\r\n    expiresIn: number,\r\n    options?: { download: string | boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { error: string | null; path: string | null; signedUrl: string }[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${this.bucketId}`,\r\n        { expiresIn, paths },\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      return {\r\n        data: data.map((datum: { signedURL: string }) => ({\r\n          ...datum,\r\n          signedUrl: datum.signedURL\r\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n            : null,\r\n        })),\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async download(\r\n    path: string,\r\n    options?: { transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: Blob\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\r\n\r\n    try {\r\n      const _path = this._getFinalPath(path)\r\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n      })\r\n      const data = await res.blob()\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  getPublicUrl(\r\n    path: string,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): { data: { publicUrl: string } } {\r\n    const _path = this._getFinalPath(path)\r\n    const _queryString = []\r\n\r\n    const downloadQueryParam = options?.download\r\n      ? `download=${options.download === true ? '' : options.download}`\r\n      : ''\r\n\r\n    if (downloadQueryParam !== '') {\r\n      _queryString.push(downloadQueryParam)\r\n    }\r\n\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n\r\n    if (transformationQuery !== '') {\r\n      _queryString.push(transformationQuery)\r\n    }\r\n\r\n    let queryString = _queryString.join('&')\r\n    if (queryString !== '') {\r\n      queryString = `?${queryString}`\r\n    }\r\n\r\n    return {\r\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\r\n  async remove(\r\n    paths: string[]\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/object/${this.bucketId}`,\r\n        { prefixes: paths },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\r\n  // async getMetadata(\r\n  //   id: string\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\r\n  // async updateMetadata(\r\n  //   id: string,\r\n  //   meta: Metadata\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await post(\r\n  //       this.fetch,\r\n  //       `${this.url}/metadata/${id}`,\r\n  //       { ...meta },\r\n  //       { headers: this.headers }\r\n  //     )\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\r\n  async list(\r\n    path?: string,\r\n    options?: SearchOptions,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private _getFinalPath(path: string) {\r\n    return `${this.bucketId}/${path}`\r\n  }\r\n\r\n  private _removeEmptyFolders(path: string) {\r\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\r\n  }\r\n\r\n  private transformOptsToQueryString(transform: TransformOptions) {\r\n    const params = []\r\n    if (transform.width) {\r\n      params.push(`width=${transform.width}`)\r\n    }\r\n\r\n    if (transform.height) {\r\n      params.push(`height=${transform.height}`)\r\n    }\r\n\r\n    if (transform.resize) {\r\n      params.push(`resize=${transform.resize}`)\r\n    }\r\n\r\n    if (transform.format) {\r\n      params.push(`format=${transform.format}`)\r\n    }\r\n\r\n    return params.join('&')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}