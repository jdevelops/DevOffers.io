{"ast":null,"code":"import _regeneratorRuntime from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Frontend22/Projects/inz/DevOffers.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nvar DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nvar DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nvar DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true\n};\nvar DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\n\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n\n    var isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n\n    if (isPlatform) {\n      var urlParts = _supabaseUrl.split('.');\n\n      this.functionsUrl = \"\".concat(urlParts[0], \".functions.\").concat(urlParts[1], \".\").concat(urlParts[2]);\n    } else {\n      this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    } // default storage key uses the supabase project ref as a namespace\n\n\n    var defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    var DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    var settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n\n\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this.headers,\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n  }, {\n    key: \"from\",\n    value: function from(relation) {\n      return this.rest.from(relation);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param args  The parameters to pass to the function call.\n     * @param options.head   When set to true, no data will be returned.\n     * @param options.count  Count algorithm to use to count rows in a table.\n     *\n     */\n\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n      return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      return this.realtime.removeAllChannels();\n    }\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken() {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$auth$getS, data;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.auth.getSession();\n\n              case 2:\n                _yield$this$auth$getS = _context.sent;\n                data = _yield$this$auth$getS.data;\n                return _context.abrupt(\"return\", (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref, headers, fetch) {\n      var autoRefreshToken = _ref.autoRefreshToken,\n          persistSession = _ref.persistSession,\n          detectSessionInUrl = _ref.detectSessionInUrl,\n          storage = _ref.storage,\n          storageKey = _ref.storageKey;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, authHeaders), headers),\n        storageKey: storageKey,\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        storage: storage,\n        fetch: fetch\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign({\n          apikey: this.supabaseKey\n        }, options === null || options === void 0 ? void 0 : options.params)\n      }));\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this = this;\n\n      var data = this.auth.onAuthStateChange(function (event, session) {\n        _this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n      });\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, token, source) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n        this.changedAccessToken = undefined;\n      }\n    }\n  }]);\n\n  return SupabaseClient;\n}();\n\nexport { SupabaseClient as default };","map":{"version":3,"mappings":"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","names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","DEFAULT_REALTIME_OPTIONS","SupabaseClient","supabaseUrl","supabaseKey","options","Error","_supabaseUrl","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","defaultStorageKey","URL","hostname","DEFAULTS","db","realtime","auth","storageKey","global","settings","_a","_b","_c","_d","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","Object","rest","_h","_listenForAuthEvents","customFetch","relation","from","fn","args","rpc","name","opts","config","channel","getChannels","removeChannel","removeAllChannels","getSession","data","session","access_token","storage","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","token","source","changedAccessToken","setAuth","signOut","undefined"],"sources":["C:\\Frontend22\\Projects\\inz\\DevOffers.io\\node_modules\\@supabase\\supabase-js\\src\\SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n}\n\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected realtime: RealtimeClient\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.')\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\n    }\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View>\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\n    return this.rest.from(relation)\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param args  The parameters to pass to the function call.\n   * @param options.head   When set to true, no data will be returned.\n   * @param options.count  Count algorithm to use to count rows in a table.\n   *\n   */\n  rpc<\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ): PostgrestFilterBuilder<\n    Schema,\n    Function_['Returns'] extends any[]\n      ? Function_['Returns'][number] extends Record<string, unknown>\n        ? Function_['Returns'][number]\n        : never\n      : never,\n    Function_['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}